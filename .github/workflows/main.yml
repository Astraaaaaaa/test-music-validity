name: Build and Release

on:
  push:
    branches: [ main ]
    # tags:
    #   - 'v*'  # Trigger only when a tag starting with 'v' is pushed
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Name of the tag'
        required: false
        default: 'v1.0.0'
      upload_artifact:
        description: 'Upload artifact to release'
        required: false
        default: 'true'

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
      packages: write
      actions: write
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: 3.7

    # Install FFmpeg using Chocolatey
    - name: Install FFmpeg
      run: |
        choco install ffmpeg -y
        refreshenv
        # Verify FFmpeg installation
        ffmpeg -version
        ffprobe -version
    # Add FFmpeg to PATH
    - name: Add FFmpeg to PATH
      run: |
        echo "C:\ProgramData\chocolatey\lib\ffmpeg\tools\ffmpeg\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    
    - name: Install UPX
      run: |
        choco install upx -y
        refreshenv
        # Verify UPX installation
        upx --version

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build executable
      run: |
        pyinstaller test-music-validity.py --onefile --icon=icon.ico --name=check_music_validity `
          --add-binary "C:\ProgramData\chocolatey\lib\ffmpeg\tools\ffmpeg\bin\ffmpeg.exe;." `
          --add-binary "C:\ProgramData\chocolatey\lib\ffmpeg\tools\ffmpeg\bin\ffprobe.exe;." `
          --upx-dir="C:\ProgramData\chocolatey\lib\upx\tools" `
          --noupx `
          --clean `
          --strip `
          --noupx `
          --clean `
          --strip `
          --exclude-module tkinter `
          --exclude-module matplotlib `
          --exclude-module PIL `
          --exclude-module PyQt5 `
          --exclude-module PySide2 `
          --exclude-module wx
          
        # Get original size
        $originalSize = (Get-Item "dist\check_music_validity.exe").length / 1MB
        Write-Host "Original size: $([math]::Round($originalSize, 2)) MB"
        
        # Apply additional UPX compression with best settings
        cd dist
        upx --ultra-brute --best --lzma --force `
          --compress-exports=1 `
          --compress-icons=1 `
          --compress-resources=1 `
          --strip-relocs=1 `
          --no-backup `
          --overlay=strip `
          --8086 `
          --8mib-ram `
          --all-methods `
          --all-filters `
          check_music_validity.exe

        # Get compressed size
        $compressedSize = (Get-Item "check_music_validity.exe").length / 1MB
        Write-Host "Compressed size: $([math]::Round($compressedSize, 2)) MB"
        Write-Host "Reduction: $([math]::Round(($originalSize - $compressedSize) / $originalSize * 100, 2))%"        

    # Optionally verify that it works (provided that it does not need user interaction)
    - run: ./dist/check_music_validity.exe
    - uses: actions/upload-artifact@v4
      with:
        name: build-artifact
        path: dist/*

        
  release:
    runs-on: windows-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
    - uses: actions/checkout@v4

    - name: Download Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: build-artifact
        path: ./dist

    - name: Determine Tag Name
      id: determine_tag_name
      run: |
        if ($env:GITHUB_REF -like "refs/tags/*") {
          # Extract the tag name from GITHUB_REF
          $tag_name = $env:GITHUB_REF.Substring(10)  # Remove 'refs/tags/' (10 characters)
          echo "::set-output name=tag_name::$tag_name"
        } else {
          # Use the tag_name from the event input
          $tag_name = "${{ github.event.inputs.tag_name }}"
          echo "::set-output name=tag_name::$tag_name"
        }

    - name: Check for Existing Tag
      id: check_tag
      run: |
        $tag_name = "${{ steps.determine_tag_name.outputs.tag_name }}"
        $response = curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" `
          "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$tag_name"
        
        if ($response -and ($response | ConvertFrom-Json).ref) {
          echo "tag_exists=true" >> $env:GITHUB_ENV
        } else {
          echo "tag_exists=false" >> $env:GITHUB_ENV
        }
        
    - name: Create Release
      id: create_release
      if: env.tag_exists == 'false'  # Only create release if tag does not exist
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      with:
        tag_name: ${{ steps.determine_tag_name.outputs.tag_name }}
        release_name: ${{ steps.determine_tag_name.outputs.tag_name }}
        body: |
          ## Music File Validator Release
          
          ### Features
          - MP3 file validation
          - Audio quality analysis
          - Excel report generation
          
          ### Included Files
          - check_music_validity.exe - Main executable
          
          ### Requirements
          - Windows OS
          - No additional dependencies needed (FFmpeg included)
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: ${{ github.event.inputs.upload_artifact == 'true' && env.tag_exists == 'false' }}  # Only upload if tag does not exist
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/check_music_validity.exe
        asset_name: check_music_validity.exe
        asset_content_type: application/octet-stream